<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Submit Problem - solveMyProblem</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/css/styles.css">
    <link rel="stylesheet" href="/assets/css/footer.css">
    <link rel="stylesheet" href="/assets/css/header.css">
    <style>
        #main-div {
            padding-top: 120px;
            padding-bottom: 100px;
        }
        .message {
            margin-top: 20px;
            font-size: 18px;
            color: #555;
        }
        .alert-success {
            color: green;
        }
        .alert-error {
            color: red;
        }
    </style>
</head>
<body>
<!-- Header with logo and system info -->
<header>
    <div class="container d-flex justify-content-between align-items-center">
        <img id="small_logo" src="/assets/img/small_logo.png" alt="solveME logo" class="img-fluid">
        <p id="system-info">System info: <span id="date-time"></span>, Health: <span id="system-health">Checking...</span></p>
    </div>
</header>

<div id="main-div" class="container">
    <h2>Submit Problem</h2>

    <!-- Display success or error messages -->
    <% if (message) { %>
        <p class="alert-success"><%= message %></p>
    <% } %>

    <% if (error) { %>
        <p class="alert-error"><%= error %></p>
    <% } %>

    <!-- Submit Problem Form -->
    <form id="problemForm" class="form-container" action="/problems/submit" method="POST">
        <!-- Problem Type Dropdown -->
        <div class="mb-3">
            <label for="problemType" class="form-label">Problem Type:</label>
            <select name="problemType" id="problemType" class="form-select">
                <option value="vrp">Vehicle Routing Problem (VRP)</option>
                <option value="lp">Linear Programming</option>
                <option value="knapsack">Knapsack Problem</option>
            </select>
        </div>

        <!-- VRP Problem Parameters -->
        <div id="vrpParameters" style="display:none;">
            <h4>Vehicle Routing Problem Parameters</h4>

            <div class="mb-3">
                <label for="locationFile" class="form-label">Select Location File:</label>
                <select name="locationFile" id="locationFile" class="form-select">
                    <option value="locations_20.json">20 Locations</option>
                    <option value="locations_200.json">200 Locations</option>
                    <option value="locations_1000.json">1000 Locations</option>
                </select>
            </div>

            <div class="mb-3">
                <label for="numVehicles" class="form-label">Number of Vehicles:</label>
                <input type="number" id="numVehicles" name="numVehicles" class="form-control" placeholder="Enter the number of vehicles" min="1" required>
            </div>

            <div class="mb-3">
                <label for="depot" class="form-label">Depot Index:</label>
                <input type="number" id="depot" name="depot" class="form-control" placeholder="Enter the depot index (e.g., 0)" required>
            </div>

            <div class="mb-3">
                <label for="maxDistance" class="form-label">Maximum Distance per Vehicle:</label>
                <input type="number" id="maxDistance" name="maxDistance" class="form-control" placeholder="Enter the max distance each vehicle can travel" required>
            </div>
        </div>

        <!-- LP Problem Parameters -->
        <div id="lpParameters" style="display:none;">
            <h4>Linear Programming Problem Parameters (Not Implemented)</h4>

            <div class="mb-3">
                <label for="objectiveFunction" class="form-label">Objective Function:</label>
                <input type="text" id="objectiveFunction" name="objectiveFunction" class="form-control" placeholder="Enter the objective function (e.g., 3x + 4y)" required>
            </div>

            <div class="mb-3">
                <label for="constraints" class="form-label">Constraints:</label>
                <textarea id="constraints" name="constraints" class="form-control" rows="3" placeholder="Enter constraints (e.g., x + y ≤ 10)" required></textarea>
            </div>

            <div class="mb-3">
                <label for="optGoal" class="form-label">Optimization Goal:</label>
                <select name="optGoal" id="optGoal" class="form-select">
                    <option value="maximize">Maximize</option>
                    <option value="minimize">Minimize</option>
                </select>
            </div>
        </div>

        <!-- Knapsack Problem Parameters -->
        <div id="knapsackParameters" style="display:none;">
            <h4>Knapsack Problem Parameters(Not Implemented)</h4>

            <div class="mb-3">
                <label for="itemWeights" class="form-label">Item Weights (comma-separated):</label>
                <input type="text" id="itemWeights" name="itemWeights" class="form-control" placeholder="Enter item weights (e.g., 3, 4, 5)" required>
            </div>

            <div class="mb-3">
                <label for="itemValues" class="form-label">Item Values (comma-separated):</label>
                <input type="text" id="itemValues" name="itemValues" class="form-control" placeholder="Enter item values (e.g., 10, 15, 7)" required>
            </div>

            <div class="mb-3">
                <label for="capacity" class="form-label">Knapsack Capacity:</label>
                <input type="number" id="capacity" name="capacity" class="form-control" placeholder="Enter knapsack capacity (e.g., 50)" required>
            </div>
        </div>

        <!-- Submit Button -->
        <button type="submit" class="btn btn-success btn-custom">Submit</button>
    </form>
</div>

<!-- Footer -->
<footer class="footer-basic">
    <div class="container text-center">
        <ul class="list-inline">
            <li class="list-inline-item"><a href="/">Home</a></li>
            <li class="list-inline-item"><a href="/credits/">Credits</a></li>
            <li class="list-inline-item"><a href="/problems/">Submit</a></li>
            <li class="list-inline-item"><a href="/problems/show">Submissions</a></li>
        </ul>
        <p class="copyright">Company Name © 2021</p>
    </div>
</footer>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    document.getElementById('problemType').addEventListener('change', updateFormSections);

    // Call this function initially when the page loads to display the correct section
    document.addEventListener('DOMContentLoaded', function() {
        updateFormSections();
    });

    function updateFormSections() {
        const problemType = document.getElementById('problemType').value;
        const vrpParameters = document.getElementById('vrpParameters');
        const lpParameters = document.getElementById('lpParameters');
        const knapsackParameters = document.getElementById('knapsackParameters');

        // Hide all parameter sections initially
        vrpParameters.style.display = 'none';
        lpParameters.style.display = 'none';
        knapsackParameters.style.display = 'none';

        // Remove 'required' attribute from all inputs
        document.querySelectorAll('#lpParameters input, #lpParameters textarea').forEach(input => input.removeAttribute('required'));
        document.querySelectorAll('#knapsackParameters input').forEach(input => input.removeAttribute('required'));

        // Show the parameters based on the selected problem type and add 'required' to relevant inputs
        if (problemType === 'vrp') {
            vrpParameters.style.display = 'block';
        } else if (problemType === 'lp') {
            lpParameters.style.display = 'block';
            document.querySelector('#objectiveFunction').setAttribute('required', 'required');
            document.querySelector('#constraints').setAttribute('required', 'required');
        } else if (problemType === 'knapsack') {
            knapsackParameters.style.display = 'block';
            document.querySelector('#itemWeights').setAttribute('required', 'required');
            document.querySelector('#itemValues').setAttribute('required', 'required');
            document.querySelector('#capacity').setAttribute('required', 'required');
        }
    }

</script>

<script>
    // Function to format and display current date and time
    function updateDateTime() {
        const dateTimeElement = document.getElementById('date-time');
        const now = new Date();
        const formattedTime = now.toLocaleString();  // Localized date and time string
        dateTimeElement.textContent = formattedTime;
    }

    // Update date and time every second
    setInterval(updateDateTime, 1000);
    updateDateTime();  // Call immediately to set on load

    // Optionally, system health data can be fetched from backend (e.g., CPU/Memory usage)
    async function fetchSystemHealth() {
        try {
            const response = await fetch('/system/health');
            const data = await response.json();
            document.getElementById('system-health').textContent = data.healthStatus;
        } catch (error) {
            document.getElementById('system-health').textContent = 'Unavailable';
        }
    }

    // Fetch system health on page load
    fetchSystemHealth();
</script>

</body>
</html>
